API Response:
Description: <h3>Assignment objectives</h3>
<p><span style="font-size: medium;">The purpose of this assignment is to:</span></p>
<ul>
<li><span style="font-size: medium;">Evaluate the performance of a given processor,</span></li>
<li><span style="font-size: medium;">Understand how changes in software and hardware affect the performance, and evaluate potential performance enhancements,</span></li>
<li><span style="font-size: medium;">Identify performance misconceptions and pitfalls.</span></li>
</ul>
<h3>General guidelines</h3>
<p class="Default"><span style="font-size: medium; color: var(--ic-brand-font-color-dark); font-family: inherit;"><span class="TextRun SCXW241975476 BCX0" lang="EN-US" data-contrast="none"><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default" data-ccp-parastyle-defn="{&quot;ObjectId&quot;:&quot;33d68399-4d39-41a1-b791-c086359e415a|50&quot;,&quot;ClassId&quot;:1073872969,&quot;Properties&quot;:[469775450,&quot;Default&quot;,201340122,&quot;2&quot;,134233614,&quot;true&quot;,469778129,&quot;Default&quot;,335572020,&quot;1&quot;,201342448,&quot;1&quot;,469777841,&quot;Cambria&quot;,469777842,&quot;Cambria&quot;,469777843,&quot;Calibri&quot;,469777844,&quot;Cambria&quot;,469769226,&quot;Cambria,Calibri&quot;,335551500,&quot;0&quot;,268442635,&quot;24&quot;,335551547,&quot;1033&quot;,335559740,&quot;240&quot;,201341983,&quot;0&quot;,335559739,&quot;0&quot;]}">Please </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">submit</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default"> your assignment by uploading a Microsoft Word Document or a PDF file</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default"> that </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">contains</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default"> the </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">typed answers</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default"> to the </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">following </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">questions. </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">Make sure to </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">s</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">how your work and steps clearly, </span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">write any formula you use, do not plug in numbers right away.&nbsp;</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">S</span><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">olutions for the following problems are to be done by you and only you.</span></span> &nbsp;</span></p>
<h3>Questions (total 60 points)&nbsp; &nbsp;</h3>
<ol>
<li data-leveltext="%1." data-font="Calibri" data-listid="36" data-list-defn-props="{&quot;335551671&quot;:1,&quot;335552541&quot;:0,&quot;335559683&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:720,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,0,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%1.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="1"><span data-contrast="none">(11 points) Consider running a program on a 3.4 GHz processor in 10 seconds. </span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span>
<ol style="list-style-type: upper-alpha;">
<li data-leveltext="%1." data-font="Calibri" data-listid="36" data-list-defn-props="{&quot;335551671&quot;:1,&quot;335552541&quot;:0,&quot;335559683&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:720,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,0,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%1.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="1">If the CPI is 1.7, what is <span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-contrast="none">the number of cycles and the number of instructions?</span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}"> </span></li>
<li data-leveltext="%1." data-font="Calibri" data-listid="36" data-list-defn-props="{&quot;335551671&quot;:1,&quot;335552541&quot;:0,&quot;335559683&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:720,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,0,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%1.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="1">We are trying to reduce the execution time. We noticed that by increasing the clock rate, the CPI increases by 10% but the execution time is reduced by 20%.&nbsp; What clock rate should we have to get this time reduction?<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></li>
</ol>
</li>
<li data-leveltext="%1." data-font="Calibri" data-listid="36" data-list-defn-props="{&quot;335551671&quot;:1,&quot;335552541&quot;:0,&quot;335559683&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:720,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,0,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%1.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="1"><span data-contrast="none">(12 points) Consider running a program on two different processors, P1 and P2, that implement the same instruction set architecture. P1 has a 2.7 GHz clock rate and P2 has a 2.9 GHz clock rate. The program has 1 million instructions, divided into three classes: A, B, and C. 10% of the instructions are class A, 20% are class B, 70% are class C. The CPIs of the three classes when running on P1 are 1, 3, and 6, respectively. The CPIs of the three classes when running on P2 are 2, 4, and 7, respectively. </span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></li>
</ol>
<ol>
<li style="list-style-type: none;">
<ol style="list-style-type: upper-alpha;">
<li data-leveltext="%2." data-font="Times New Roman" data-listid="36" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559683&quot;:1,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2"><span data-contrast="none">What is the global or weighted average CPI for each processor?&nbsp;</span></li>
<li data-leveltext="%2." data-font="Times New Roman" data-listid="36" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559683&quot;:1,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2">What is the number of clock cycles required for each processor?&nbsp;<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}"> </span></li>
<li data-leveltext="%2." data-font="Times New Roman" data-listid="36" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559683&quot;:1,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2">Which processor is faster?<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}"> </span></li>
</ol>
</li>
</ol>
<p>3. (8 points) <span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-contrast="auto">Compilers can highly impact the performance of an application.&nbsp;</span></p>
<ol style="list-style-type: upper-alpha;">
<li><span data-contrast="auto"><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">Consider choosing between two different compilers, A and B, to run the same high-level program. The program compiled using compiler A results in 1 billion instructions and has an execution time of 1.1 seconds. The program compiled using compiler B results in 1.2 billion instructions and an execution time of 1.5 seconds. If the compiled programs run on 1 GHz processors, w</span>hat is the average CPI for the programs compiled using compiler A and compiler B?</span></li>
<li><span data-contrast="auto"><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}"> Assume the compiled programs using compiler A and B run on two different processors</span></span> that have different clock cycle times but the same CPIs from part A. If the execution times on the two processors are the same, how much faster is the clock of the processor running compiler A's code versus the clock of the processor running compiler B's code?<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}"> &nbsp;</span></li>
</ol>
<p><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559685&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">4. </span><span data-contrast="auto">(12 points) Consider the following two processors: P1 has a clock rate of 4 GHz, average CPI of 0.9, and requires the execution of 5 billion instructions. P2 has a clock rate of 3 GHz, an average CPI of 0.75, and requires the execution of 1 billion instructions. </span><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<ol style="list-style-type: upper-alpha;">
<li><span data-contrast="auto">One usual fallacy is to consider the computer with the largest clock rate as having the highest performance. Is this true for P1 and P2?</span></li>
<li>Another fallacy is to consider that the processor executing the largest number of instructions will need a larger CPU time. Considering that processor P1 is executing a sequence of 1 billion instructions and that the CPI of processors P1 and P2 do not change, determine the number of instructions that P2 can execute in the same time that P1 needs to execute 1 billion instructions.<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}"> </span></li>
<li>A common fallacy is to use MIPS to compare the performance of two different processors, and consider that the processor with the largest MIPS has the best performance. Is this true for P1 and P2?<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></li>
</ol>
<p><span data-contrast="auto">5. (12 points) Consider a computer running a program that requires 250 seconds, with 70 seconds spent executing floating point instructions, 130 s executing integer instructions, and 50 seconds executing branch instructions. </span><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<ol style="list-style-type: upper-alpha;">
<li><span data-contrast="auto">By how much is the total time reduced if the time for floating point operations is reduced by 30%?&nbsp;</span></li>
<li>By how much is the time for integer operations reduced if the total time is reduced by 30%? Assume the time for other operations remains the same.</li>
<li>Can the total time can be reduced by 30% by reducing only the time for branch instructions?<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></li>
</ol>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <h3>Assignment objectives</h3>
<p><span style="font-size: medium;">The purpose of this assignment is to:</span></p>
<ul>
<li><span style="font-size: medium;">Understand MIPS instructions, formats and fields,</span></li>
<li><span style="font-size: medium;">Write simple assembly programs using the MIPS instruction set,</span></li>
<li><span style="font-size: medium;">Convert assembly instructions to C code and vice versa,</span></li>
<li><span style="font-size: medium;">Convert assembly instructions to binary words and vice versa</span>.</li>
</ul>
<h3>General guidelines</h3>
<p class="Default"><span style="font-size: medium;">All question numbers refer to exercises at the end of chapter 2 ( section 2.25)&nbsp; of the zybooks textbook. Solutions for the following problems are to be done by you and only you.</span></p>
<p class="Default"><span style="font-size: medium;">Please submit your assignment by uploading a Microsoft Word Document or a PDF file. Type your answers and show your work and steps clearly. Make sure to write any formula you use, do not plug in numbers right away.&nbsp;</span></p>
<h3>Questions (total 45 points)&nbsp; &nbsp;</h3>
<ol start="1" type="1">
<li><span data-contrast="auto"><span> (8 points) Exercise 2.</span><span>25.</span><span>7</span></span></li>
<li><span data-contrast="auto"><span> (</span><span>7</span><span> points) Exercise 2.</span><span>25.</span><span>8</span></span></li>
<li><span data-contrast="auto"><span> (6 points) Exercise 2.</span><span>25.</span><span>1</span><span>2</span></span></li>
<li><span data-contrast="auto"><span> (9</span><span>&nbsp;points) Exercise 2.</span><span>25.</span><span>16 </span><span>( Note</span><span>: effect on register fields and opcode bits only. Don't worry about adjusting other fields to fit in a 32 bit instruction)</span></span></li>
<li><span data-contrast="auto"><span> (</span><span>3</span><span> points) Exercise 2.</span><span>25.</span><span>17.</span><span>a</span></span></li>
<li><span data-contrast="auto"><span> (</span><span>4</span><span> points) Exercise 2.</span><span>25.</span><span>21</span></span></li>
<li><span data-contrast="auto"><span> (</span><span>8</span><span> points) Exercise 2.</span><span>25.</span><span>22.</span><span>a and </span><span>2.</span><span>25.</span><span>22.b</span></span></li>
</ol>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <h3>Assignment objectives</h3>
<p>The purpose of this assignment is to:</p>
<ul>
<li>Understand different number representations including signed, unsigned integers, hexadecimal and floating point numbers,</li>
<li>Perform different binary arithmetic operations including addition, and subtraction</li>
<li>Identify when arithmetic operations result in overflow or underflow conditions.</li>
<li>Design a basic arithmetic unit.</li>
</ul>
<h3>General guidelines</h3>
<p><span class="TextRun SCXW241975476 BCX0" lang="EN-US" data-contrast="none"><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default" data-ccp-parastyle-defn="{&quot;ObjectId&quot;:&quot;33d68399-4d39-41a1-b791-c086359e415a|50&quot;,&quot;ClassId&quot;:1073872969,&quot;Properties&quot;:[469775450,&quot;Default&quot;,201340122,&quot;2&quot;,134233614,&quot;true&quot;,469778129,&quot;Default&quot;,335572020,&quot;1&quot;,201342448,&quot;1&quot;,469777841,&quot;Cambria&quot;,469777842,&quot;Cambria&quot;,469777843,&quot;Calibri&quot;,469777844,&quot;Cambria&quot;,469769226,&quot;Cambria,Calibri&quot;,335551500,&quot;0&quot;,268442635,&quot;24&quot;,335551547,&quot;1033&quot;,335559740,&quot;240&quot;,201341983,&quot;0&quot;,335559739,&quot;0&quot;]}">This assignment has two parts. Make sure to upload one document with the detailed answers to the questions in part 1 and screenshots of every macro block from part 2 by the due date. Additionally, make sure to</span></span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"> checkoff your design with the grader/instructor during office hours. </span><span class="TextRun SCXW241975476 BCX0" lang="EN-US" data-contrast="none"><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">Solutions for the following problems are to be done by you and only you.<span>&nbsp;&nbsp;</span></span></span></p>
<h3>Questions (total 60 points)&nbsp; &nbsp;</h3>
<p>PART 1: <span data-contrast="auto">(30 points)</span></p>
<p><span class="TextRun SCXW241975476 BCX0" lang="EN-US" data-contrast="none"><span class="NormalTextRun SCXW241975476 BCX0" data-ccp-parastyle="Default">In this part, you need to answer the questions below. Make sure to<span>&nbsp;</span>show your work and steps clearly,<span>&nbsp;</span>write any formula you use, do not plug in numbers right away. </span></span></p>
<p>1. (8 points) Assume that registers $s0 and $s1 hold the values 0x80000000 and 0xE0000000, respectively when answering the following four questions.</p>
<ol style="list-style-type: upper-alpha;">
<li data-leveltext="%2." data-font="Calibri" data-listid="5" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2"><span data-contrast="auto">What is the value of&nbsp;$t0&nbsp;after executing add $t0, $s0, $s1? &nbsp;&nbsp;</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:200,&quot;335559740&quot;:276}">&nbsp;</span></li>
<li data-leveltext="%2." data-font="Calibri" data-listid="5" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2"><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:200,&quot;335559740&quot;:276}">Is the </span><span data-contrast="auto">result in $t0 the desired result, or has there been overflow after executing the add instruction? </span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:200,&quot;335559740&quot;:276}">&nbsp;</span></li>
<li data-leveltext="%2." data-font="Calibri" data-listid="5" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2"><span data-contrast="auto">What is the value of $t0 after executing sub $t0, $s0, $s1?&nbsp;</span></li>
<li data-leveltext="%2." data-font="Calibri" data-listid="5" data-list-defn-props="{&quot;335552541&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:1440,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%2.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="2"><span data-contrast="auto">Is the result in $t0 the desired result, or has there been overflow after executing the sub instruction?</span></li>
</ol>
<p>2. <span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;">(4 points) <span class="NormalTextRun SCXW26764842 BCX0" data-ccp-parastyle="Default">What is the binary representation of the decimal number 62.25 assuming the IEEE 754 single precision format</span><span class="NormalTextRun SCXW26764842 BCX0" data-ccp-parastyle="Default">.</span></span></p>
<p><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"><span class="NormalTextRun SCXW26764842 BCX0" data-ccp-parastyle="Default">3. (</span></span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;">18 points) Given the following 32-bit binary sequences representing single precision IEEE</span></p>
<p class="Default">754 floating point numbers:</p>
<p class="Default">&nbsp;a = 0100 0000 1101 1000 0000 0000 0000 0000</p>
<p class="Default">&nbsp;b = 1011 1110 1110 0000 0000 0000 0000 0000</p>
<p class="Default">a.&nbsp;<span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"><span class="NormalTextRun SCXW186186272 BCX0" data-ccp-parastyle="Default">What normalized binary numbers do a and b represent? Use the IEEE 754 standard and show your work</span></span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"><span class="NormalTextRun SCXW186186272 BCX0" data-ccp-parastyle="Default">.</span></span><strong><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"><span class="NormalTextRun SCXW186186272 BCX0" data-ccp-parastyle="Default">&nbsp;</span></span></strong></p>
<p>b. Perform a + b and show the final addition and multiplication results in both <strong>normalized binary format</strong> and <strong>IEEE 754 single-precision format</strong>.&nbsp;</p>
<p>c. Perform a × b and show the final addition and multiplication results in both <strong>normalized binary format</strong> and <strong>IEEE 754 single-precision format</strong>.&nbsp;</p>
<p>Note: Do not convert a and b to decimal base, compute the addition and multiplication, then convert the results back to normalized binary and single precision.</p>
<p>PART 2: &nbsp;<span data-contrast="auto">(30 points)</span></p>
<p><span data-contrast="auto">&nbsp;In this part, you need to design and test a 4-bit ALU in Digital Works. Please follow the <a class="inline_disabled" href="https://csusm-my.sharepoint.com/:w:/g/personal/malnajjar_csusm_edu/EdqIbElc2gFGlebZx1OiUg4BDl--1siX4hUVLS9NcaU6Lw?e=jCo6cY" target="_blank">instructions in this link</a> to </span><span data-contrast="auto">design and test your 4-bit ALU.&nbsp;</span></p>
<p><span data-contrast="auto"><span class="TextRun SCXW67004810 BCX0" lang="EN-US" data-contrast="auto"><span class="NormalTextRun SCXW67004810 BCX0">For a refresher</span><span class="NormalTextRun SCXW67004810 BCX0"> on how to start a digital work project, create a project and </span><span class="NormalTextRun SCXW67004810 BCX0">create a macro, please check <a class="inline_disabled" href="https://csusm-my.sharepoint.com/:w:/g/personal/malnajjar_csusm_edu/ER_chpeX8A5FhN6TModv_vABA2sfj7zUchG_N46EjdQ4xw?e=kIwRDA" target="_blank">this link</a>.&nbsp;</span></span><span class="EOP SCXW67004810 BCX0" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:160,&quot;335559740&quot;:279}">&nbsp;</span></span></p>
<p><span data-contrast="auto">When done, you need to include screenshots of all the designed blocks in the submitted document and then check off your work with the instructor/TA during office hours. If you can not make it to office hours, please schedule an additional time with the instructor. Be ready to show your truth table/logic equation for the mux2_1 and thorough testing and understanding of each unit.</span></p>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <h3>Assignment objectives</h3>
<p><span style="font-size: medium;">The purpose of this assignment is to:</span></p>
<ul>
<li><span style="font-size: medium;">Understand the key principles for building a single cycle datapath that implements a subset of MIPS instructions,</span></li>
<li><span style="font-size: medium;">Understand how to design the corresponding control to ensure the correct flow of data for different instructions,</span></li>
<li><span style="font-size: medium;">Understand how adding/modifying hardware blocks can affect processor performance.</span></li>
</ul>
<h3>General guidelines</h3>
<p class="Default"><span style="font-size: medium;">Solutions for the following problems are to be done by you and only you.</span></p>
<p class="Default"><span style="font-size: medium;">Please submit your assignment by uploading a Microsoft Word Document or a PDF file. Type your answers and show your work and steps clearly. Make sure to write any formula you use, do not plug in numbers right away.&nbsp;</span></p>
<h3>Questions (total 40 points)&nbsp; &nbsp;</h3>
<p>1. (22 points) In this exercise we examine in detail how an instruction is executed in a single-cycle datapath. Problems in this exercise refer to a clock cycle in which the processor fetches the following instruction word: 10101100011000100000000000010100.</p>
<p><span style="font-size: 1rem;">Assume that data memory is all zeros and that the processor’s registers have the following values at the beginning of the cycle in which the above instruction word is fetched:</span></p>
<table border="1" cellspacing="0" cellpadding="0"><caption>Register values</caption>
<tbody>
<tr>
<th scope="col" valign="top" width="60">
<p class="Default">R0</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R1</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R2</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R3</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R4</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R5</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R6</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R8</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R12</p>
</th>
<th scope="col" valign="top" width="60">
<p class="Default">R31</p>
</th>
</tr>
<tr>
<td valign="top" width="60">
<p class="Default">0</p>
</td>
<td valign="top" width="60">
<p class="Default">-1</p>
</td>
<td valign="top" width="60">
<p class="Default">2</p>
</td>
<td valign="top" width="60">
<p class="Default">-3</p>
</td>
<td valign="top" width="60">
<p class="Default">-4</p>
</td>
<td valign="top" width="60">
<p class="Default">10</p>
</td>
<td valign="top" width="60">
<p class="Default">6</p>
</td>
<td valign="top" width="60">
<p class="Default">8</p>
</td>
<td valign="top" width="60">
<p class="Default">2</p>
</td>
<td valign="top" width="60">
<p class="Default">-16</p>
</td>
</tr>
</tbody>
</table>
<p>a) What are the outputs of the sign-extend and the jump “Shift left 2” for this instruction word?</p>
<p><span style="font-size: 1rem;">b) What are the values of the <strong>ALU control unit</strong>’s inputs for this instruction?</span></p>
<p><span style="font-size: 1rem;">c) What is the new PC address after this instruction is executed? Highlight the path through which this value is determined.</span></p>
<p><span style="font-size: 1rem;">d) For each Mux, show the values of its data output during the execution of this instruction and given the above register values.</span></p>
<p><span style="font-size: 1rem;">e) For the ALU and the two add units, what are their data input values?</span></p>
<p><span style="font-size: 1rem;">f) What are the values of all inputs for the “Registers” unit? What is the value of the "RegWrite" control signal?</span></p>
<p><span style="font-size: 1rem;">&nbsp;</span></p>
<p>2. (10 points)&nbsp;<span data-contrast="none">Consider the basic single-cycle MIPS datapath that implements a subset of the MIPS instruction set (add, subtract, and, or, lw, sw, beq, jump). We would like to modify this datapath to implement the swapm</span><i> </i><span data-contrast="none">instruction:</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><strong><i><span data-contrast="none">Instruction:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; swapm rs, rt</span></i></strong><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><strong><i><span data-contrast="none">Interpretation:&nbsp;&nbsp;&nbsp;&nbsp; R[rt] = M[R[rs]]&nbsp;</span></i></strong><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><strong><i><span data-contrast="none">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; M[R[rs]] = R[rt]</span></i></strong><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p class="Default"><span style="font-size: medium;">Please refer to the single cycle diagram below:</span></p>
<p class="Default"><img src="https://csusm.instructure.com/courses/34860/files/5659951/preview?verifier=LK8hNxDulPQmiS7KwWTKlU7UsO6I8neJLQmgfMSr" alt="Picture1.png" width="713" height="516" data-api-endpoint="https://csusm.instructure.com/api/v1/courses/34860/files/5659951" data-api-returntype="File"></p>
<p>a) Which existing blocks will we use? Do we need to add new functional units or modify existing ones? Do we need extra control signals? Explain how data is flowing in the datapath.</p>
<p id="yui_3_17_2_1_1598115593118_121">b) Specify the value of each control signal (RegDst, ALUSrc, ALUOp, MemRead, MemWrite, MemToReg, RegWrite, Branch) as well as the value of any additional signal if needed.</p>
<p>&nbsp;</p>
<p><span style="font-size: 1rem;">3. (8 points) When processor designers consider a possible improvement to the processor </span><span style="font-size: 1rem;">datapath, the decision usually depends on the performance and cost. Assume that we are starting with the single cycle datapath seen in class, where I-Mem, Add, Mux, ALU, Regs, D-Mem, and Control blocks have latencies of 400 ps, 100 ps, 30 ps, 120 ps, 200 ps, 350 ps, and 100 ps, respectively.</span></p>
<p class="Default"><span style="font-size: 1rem;">Consider the addition of a multiplier to the ALU. Th is addition will add 300 ps to the&nbsp;</span>latency of the ALU but will reduce the number of instructions executed by 5% since we will no longer need to emulate the MUL instruction.</p>
<p><span style="font-size: 1rem;">a) What is the clock cycle time with and without this improvement?</span></p>
<p><span style="font-size: 1rem;">b) Was there a speedup or a slow down by adding this multiplier? What is the speedup or slowdown achieved?</span></p>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <h3>Assignment objectives</h3>
<p><span style="font-size: medium;">The purpose of this assignment is to:</span></p>
<ul>
<li><span style="font-size: medium;">Understand the key principles for building a pipelined datapath and control that implements a subset of MIPS instructions,</span></li>
<li><span style="font-size: medium;">Understand how data and control dependences affect execution of a pipelined design, and how such dependences are handled using forwarding, hazard detection, code rescheduling, and branch prediction,</span></li>
<li><span style="font-size: medium;">Understand how splitting stages and deeper pipelines can affect processor performance.</span></li>
</ul>
<h3>General guidelines</h3>
<p class="Default"><span style="font-size: medium;">Solutions for the following problems are to be done by you and only you.</span></p>
<p class="Default"><span style="font-size: medium;">Please submit your assignment by uploading a a PDF file. Type your answers and show your work and steps clearly. Make sure to write any formula you use, do not plug in numbers right away.&nbsp;</span></p>
<h3>Questions (total 60 points)&nbsp; &nbsp;</h3>
<ol>
<li><span data-contrast="none"> (15 points) Consider the following MIPS code segment:</span></li>
</ol>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span><span data-contrast="none">add $t0, $t0, $t1&nbsp;</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">lw&nbsp;&nbsp; $t2, 16($t0)&nbsp;</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">add $t0, $t1, $t2&nbsp;</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">sub $t0, $t3, $t2</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">a) Fill in the multicycle diagram for the above code when running on a single cycle processor. Hint: How many cycles does it take to execute any instruction for a single cycle?</span></p>
<table style="border-collapse: collapse;" border="1" data-tablestyle="MsoTableGrid" data-tablelook="1184">
<tbody>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">Instruction</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C1</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C2</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C3</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C4</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C5</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C6</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C7</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C8</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C9</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C10</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
</tbody>
</table>
<p><span data-contrast="auto">b) </span><span data-contrast="auto">Using the pipelined datapath shown below, fill in the multicycle diagram for the same code. Use arrows to indicate forwarding and bubbles or dashes to show stalls.</span></p>
<p><span data-contrast="auto"><img src="https://csusm.instructure.com/courses/34860/files/6523883/preview?verifier=Z3DKQhZCPAxUKLZn62rYSG4GBt4IosHqCKbUkAfV" alt="Pipelined design" data-api-endpoint="https://csusm.instructure.com/api/v1/courses/34860/files/6523883" data-api-returntype="File"></span></p>
<table style="border-collapse: collapse;" border="1" data-tablestyle="MsoTableGrid" data-tablelook="1184">
<tbody>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">Instruction</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C1</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C2</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C3</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C4</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C5</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C6</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C7</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C8</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C9</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">C10</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
<tr>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
<td data-celllook="4369">
<p><strong><span data-contrast="auto">&nbsp;</span></strong><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;335559738&quot;:0,&quot;335559739&quot;:0}">&nbsp;</span></p>
</td>
</tr>
</tbody>
</table>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559740&quot;:257}">&nbsp;</span></p>
<ol start="2">
<li><span data-contrast="none">(25 points) Assume the CPU has the current breakdown for the datapath:</span><span><br></span><span data-contrast="none"> IF – 150ns</span><span><br></span><span data-contrast="none"> ID – 145ns</span><span>&nbsp;<br></span><span data-contrast="none"> EX – 300ns</span><span>&nbsp;<br></span><span data-contrast="none"> M – 160ns</span><span>&nbsp;<br></span><span data-contrast="none"> WB – 140ns</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></li>
</ol>
<p><span data-contrast="none">a) What is the Cycle Time of the single cycle processor?</span></p>
<p><span data-contrast="none">b) What is the Execution Time of the above code (from 1) for the single cycle processor?</span></p>
<p><span data-contrast="none">c) What is the Cycle Time of the processor if we implement pipelining?</span></p>
<p><span data-contrast="none">d) What is the Execution Time of the above code when run on the pipelined processor datapath?</span></p>
<p><span data-contrast="none">e) What is the speedup of the pipelined processor over the single cycle processor?</span></p>
<p><span data-contrast="none">&nbsp;</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<ol start="3">
<li><span data-contrast="none">(5 points) Exercise 4.19.28.a from zybooks</span></li>
<li><span data-contrast="none">(15 points) Exercise 4.19.29.a to 4.19.29.c from zybooks</span></li>
</ol>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <h3>Assignment objectives</h3>
<p><span style="font-family: georgia, 'times new roman', times, serif; font-size: medium;">The purpose of this assignment is to:</span></p>
<ul>
<li>
<p><span style="font-family: georgia, 'times new roman', times, serif; font-size: medium;">Understand key cache concepts such as choosing a block size, cache size, block placement, block replacement, associative vs. direct-mapped, and multi-level caches,</span></p>
</li>
<li>
<p><span style="font-size: medium;"><span style="font-family: georgia, 'times new roman', times, serif;"><span style="font-family: georgia, 'times new roman', times, serif;">Understand the impact of cache design and memory hierarchy on performance</span></span><span style="font-family: georgia, 'times new roman', times, serif;">.</span></span></p>
</li>
</ul>
<h3>General guidelines</h3>
<p class="Default"><span style="font-size: medium; font-family: georgia, 'times new roman', times, serif;">Solutions for the following problems are to be done by you and only you.</span></p>
<p class="Default"><span style="font-size: medium; font-family: georgia, 'times new roman', times, serif;">Please submit your assignment by uploading a Microsoft Word Document or a PDF file. Type your answers and show your work and steps clearly. Make sure to write any formula you use, do not plug in numbers right away.&nbsp;</span></p>
<h3>Questions (total 35 points)&nbsp; &nbsp;</h3>
<p><span data-contrast="none">1. (9 points) In this exercise, we will look at the different ways capacity affects overall performance. In general, cache access time is proportional to capacity. Assume we are running a program with 36% memory instructions on two processors P1 and P2.&nbsp; P1 is a 1.515 GHz processor with 2KiB L1 cache that has an 8% miss rate and 1 cycle hit time. P2 is a 1.11 GHz processor with 4KiB L1 cache that has an 6% miss rate and 1 cycle hit time. The memory access time in both is 70 ns.</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">A.&nbsp;</span><span data-contrast="none">What is the Average Memory Access Time for P1 and P2?</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:200,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">B. Assuming a base CPI of 1.0 without any memory stalls, what is the total CPI for P1 and P2? Which processor is faster?</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:200,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">2. (16 points) Multilevel caching is an important technique to overcome the limited amount of space that a first level cache can provide while still maintaining its speed. Consider a 2GHz processor with the following parameters:</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<table data-tablestyle="MsoTableGrid" data-tablelook="1696">
<tbody>
<tr>
<td data-celllook="0">
<p><span data-contrast="none">Base CPI, No memory stalls</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">Main Memory Access Time</span><span data-ccp-props="{&quot;134233117&quot;:false,&quot;134233118&quot;:false,&quot;201341983&quot;:0,&quot;335551550&quot;:1,&quot;335551620&quot;:1,&quot;335559685&quot;:0,&quot;335559737&quot;:0,&quot;335559738&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">First Level&nbsp;cache Miss Rate</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">Second Level Direct Mapped Access Time</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">Second Level Direct Mapped Cache</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}"> Miss Rate </span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">Second Level Direct 8-Way Associative Cache Access Time</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">Second Level 8-Way Associative Cache</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}"> Miss Rate </span></p>
</td>
</tr>
<tr>
<td data-celllook="0">
<p><span data-contrast="none">1.5</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">100 ns</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">7%</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">12 cycles</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">3.5%</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">28 cycles</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
<td data-celllook="0">
<p><span data-contrast="none">1.5%</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:240}">&nbsp;</span></p>
</td>
</tr>
</tbody>
</table>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<ol style="list-style-type: upper-alpha;">
<li data-leveltext="%1." data-font="Times New Roman" data-listid="4" data-list-defn-props="{&quot;335551671&quot;:1,&quot;335552541&quot;:0,&quot;335559682&quot;:4,&quot;335559683&quot;:0,&quot;335559684&quot;:-1,&quot;335559685&quot;:720,&quot;335559991&quot;:360,&quot;469769242&quot;:[65533,4,46],&quot;469777803&quot;:&quot;left&quot;,&quot;469777804&quot;:&quot;%1.&quot;,&quot;469777815&quot;:&quot;hybridMultilevel&quot;}" data-aria-posinset="1" data-aria-level="1"><span data-contrast="none">Calculate the CPI for the processor in the table using the following three options:</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span><span data-contrast="none">only a first level cache,&nbsp; </span><span data-contrast="none">a second level direct-mapped cache,&nbsp;</span><span data-contrast="none">a second level 8-way set associative cache. </span>Compare the three designs and explain which one provides better performance and why. <span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559685&quot;:0,&quot;335559731&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></li>
</ol>
<p aria-level="2"><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559738&quot;:40,&quot;335559739&quot;:0,&quot;335559740&quot;:259}">&nbsp;</span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-contrast="none">B. It is possible to have an even greater cache hierarchy than two levels. Given the processor above with a second level, direct-mapped cache, a designer wants to add a third level cache that takes 50 cycles to access and will reduce the global miss rate to 1.3%. Would this provide better performance? </span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;" data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">3. </span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;">(</span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;">10</span><span style="color: var(--ic-brand-font-color-dark); font-family: inherit; font-size: 1rem;"> points)&nbsp;Below is a list of 32-bit memory address references, given as word addresses.</span></p>
<p><span data-contrast="none">0x03, 0xb4, 0x2b, 0x02, 0xbe, 0x58, 0xbf, 0x0e, 0x1f, 0xb5, 0xbf, 0xba, 0x2e, 0xce</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span data-contrast="none">For each of these references, identify the binary address, the tag, and the index given&nbsp;a fully associative cache with two word blocks and a total size of eight words.&nbsp; Also list if each reference is a hit or a miss, assuming the cache is initially empty.</span><span data-ccp-props="{&quot;201341983&quot;:0,&quot;335559739&quot;:0,&quot;335559740&quot;:276}">&nbsp;</span></p>
<p><span style="font-family: georgia, 'times new roman', times, serif; font-size: medium;"><strong>Extra Credit (total 5 points): </strong></span><span style="font-family: georgia, 'times new roman', times, serif; font-size: medium;">Research the cache organization of a recent Processor (Intel or ARM… different from what are in the textbook), and fill out a table similar to the one from lecture. List references you used for the answer</span>.</p>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <p>After watching the YouTube video about <a class="inline_disabled" href="https://www.youtube.com/watch?v=Oa9aWdcCC4o" target="_blank">possible future technology in 2050</a>:&nbsp;</p>
<p>Which future technology is the most interesting to you? Do you think it is feasible to have by 2050?</p>
<p>Can you guess which of these things we'll actually have in 2050? Which ones seem too optimistic?</p>
<p>Any other application that you would like to work on?&nbsp;</p>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <p>Watch the video on <a class="inline_disabled" href="https://www.youtube.com/watch?v=XAf0H1-ujzI" target="_blank">Popular ISAs</a>. Research an ISA of interest and try to answer as many of the questions below as possible: &nbsp;</p>
<p>Is it RISC or CISC? How many instructions does it include?</p>
<p>What is the instruction size? Does it use fixed length or variable length instructions?</p>
<p>How many addressing modes does it support?&nbsp;</p>
<p>In which computers or applications is it used?&nbsp;</p>
<p>Any key features that distinguish it from other ISA? Strengths and weaknesses?&nbsp;&nbsp;</p>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <p><span>Read Zybooks sections 1.1 - 1.5</span></p>
<p><span>Complete participation exercises in sections 1.1-1.3</span></p>
Logged At: 2024-12-02 12:11:41

API Response:
Description: <p><span>Read and complete Zybooks sections </span><span> 1.6, 1.8, 1.11, and 1.12</span></p>
Logged At: 2024-12-02 12:11:41

